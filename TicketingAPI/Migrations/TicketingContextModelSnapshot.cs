// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingAPI.Data;

namespace TicketingAPI.Migrations
{
    [DbContext(typeof(TicketingContext))]
    partial class TicketingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TicketingAPI.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EventDateTime");

                    b.Property<string>("EventName")
                        .IsRequired();

                    b.Property<int?>("VenueId");

                    b.HasKey("EventId");

                    b.HasIndex("VenueId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("TicketingAPI.Models.EventSeat", b =>
                {
                    b.Property<int>("EventSeatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventId");

                    b.Property<decimal>("EventSeatPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeatId");

                    b.Property<int?>("TicketPurchaseId");

                    b.HasKey("EventSeatId");

                    b.HasIndex("EventId");

                    b.HasIndex("SeatId");

                    b.HasIndex("TicketPurchaseId");

                    b.ToTable("EventSeat");
                });

            modelBuilder.Entity("TicketingAPI.Models.Row", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RowName")
                        .IsRequired();

                    b.Property<int>("SectionId");

                    b.HasKey("RowId");

                    b.HasIndex("SectionId");

                    b.ToTable("Row");
                });

            modelBuilder.Entity("TicketingAPI.Models.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RowId");

                    b.Property<string>("SeatName")
                        .IsRequired();

                    b.HasKey("SeatId");

                    b.HasIndex("RowId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("TicketingAPI.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SectionName")
                        .IsRequired();

                    b.Property<int>("VenueId");

                    b.HasKey("SectionId");

                    b.HasIndex("VenueId");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("TicketingAPI.Models.TicketPurchase", b =>
                {
                    b.Property<int?>("TicketPurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmationCode");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired();

                    b.HasKey("TicketPurchaseId");

                    b.ToTable("TicketPurchase");
                });

            modelBuilder.Entity("TicketingAPI.Models.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VenueName")
                        .IsRequired();

                    b.HasKey("VenueId");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("TicketingAPI.Models.Event", b =>
                {
                    b.HasOne("TicketingAPI.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId");
                });

            modelBuilder.Entity("TicketingAPI.Models.EventSeat", b =>
                {
                    b.HasOne("TicketingAPI.Models.Event", "Event")
                        .WithMany("EventSeats")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingAPI.Models.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingAPI.Models.TicketPurchase", "TicketPurchase")
                        .WithMany("EventSeats")
                        .HasForeignKey("TicketPurchaseId");
                });

            modelBuilder.Entity("TicketingAPI.Models.Row", b =>
                {
                    b.HasOne("TicketingAPI.Models.Section", "Section")
                        .WithMany("Rows")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketingAPI.Models.Seat", b =>
                {
                    b.HasOne("TicketingAPI.Models.Row", "Row")
                        .WithMany("Seats")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketingAPI.Models.Section", b =>
                {
                    b.HasOne("TicketingAPI.Models.Venue", "Venue")
                        .WithMany("Sections")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
